"""Type stubs for fluss_python module"""

from typing import Any, Awaitable, Dict, List, Optional, Union
import pyarrow as pa
import pandas as pd

class FlussError(Exception):
    """Custom exception for Fluss errors"""
    message: str
    error_code: Optional[int]
    def __init__(self, message: str, error_code: Optional[int] = None) -> None: ...

class Config:
    """Configuration for Fluss connection using key-value properties"""
    def __init__(self, properties: Optional[Dict[str, str]] = None) -> None: ...
    @property
    def bootstrap_server(self) -> Optional[str]: ...
    @bootstrap_server.setter
    def bootstrap_server(self, server: str) -> None: ...
    @property
    def request_max_size(self) -> int: ...
    @request_max_size.setter
    def request_max_size(self, size: int) -> None: ...
    @property
    def writer_batch_size(self) -> int: ...
    @writer_batch_size.setter
    def writer_batch_size(self, size: int) -> None: ...

class FlussConnection:
    """Connection to a Fluss cluster"""
    def __init__(self, config: Config) -> None: ...
    @staticmethod
    def connect(config: Config) -> Awaitable[FlussConnection]: ...
    def get_admin(self) -> Awaitable[FlussAdmin]: ...
    def get_table(self, table_path: TablePath) -> Awaitable[FlussTable]: ...

class TablePath:
    """Represents a table path with database and table name"""
    def __init__(self, database_name: str, table_name: str) -> None: ...
    @property
    def database_name(self) -> str: ...
    @property
    def table_name(self) -> str: ...
    def table_path_str(self) -> str: ...

class Schema:
    """Schema wrapper for Fluss table schema"""
    def __init__(
        self, 
        schema: pa.Schema, 
        primary_keys: Optional[List[str]] = None,
        primary_key_name: Optional[str] = None
    ) -> None: ...
    def get_column_names(self) -> List[str]: ...
    def get_column_types(self) -> List[str]: ...
    def get_columns(self) -> List[tuple[str, str]]: ...

class TableDistribution:
    """Table distribution configuration"""
    def bucket_keys(self) -> List[str]: ...
    def bucket_count(self) -> Optional[int]: ...

class TableDescriptor:
    """Table descriptor containing schema and metadata"""
    def __init__(self, schema: Schema, **kwargs: Any) -> None: ...

class TableInfo:
    """Information about a Fluss table"""
    @property
    def table_id(self) -> int: ...
    @property
    def schema_id(self) -> int: ...
    @property
    def created_time(self) -> int: ...
    def get_primary_keys(self) -> List[str]: ...

class FlussAdmin:
    """Administrative client for managing Fluss tables"""
    def create_table(
        self, 
        table_path: TablePath, 
        table_descriptor: TableDescriptor, 
        ignore_if_exists: Optional[bool] = None
    ) -> Awaitable[None]: ...
    def get_table(self, table_path: TablePath) -> Awaitable[TableInfo]: ...

class FlussTable:
    """Represents a Fluss table for data operations"""
    def new_append_writer(self) -> Awaitable[AppendWriter]: ...
    def new_log_scanner(self) -> Awaitable[LogScanner]: ...

class AppendWriter:
    """Writer for appending data to a Fluss table"""
    def write_arrow(self, table: pa.Table) -> Awaitable[None]: ...
    def write_arrow_batch(self, batch: pa.RecordBatch) -> Awaitable[None]: ...
    def write_pandas(self, df: pd.DataFrame) -> Awaitable[None]: ...
    def close(self) -> Awaitable[None]: ...

class LogScanner:
    """Scanner for reading log data from a Fluss table"""
    def scan(
        self, 
        start_timestamp: Optional[int] = None, 
        end_timestamp: Optional[int] = None
    ) -> Awaitable[None]: ...
    def to_arrow(self) -> Awaitable[pa.Table]: ...
    def to_arrow_batch_reader(self) -> Awaitable[pa.RecordBatchReader]: ...

class Utils:
    """Utility functions for data conversion"""
    @staticmethod
    def combine_batches_to_table(batches: List[pa.RecordBatch]) -> pa.Table: ...
    @staticmethod
    def convert_scan_records_to_arrow(scan_records: Any) -> List[pa.RecordBatch]: ...
