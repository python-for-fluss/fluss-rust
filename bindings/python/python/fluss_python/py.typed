"""Type stubs for fluss_python module"""

from typing import Any, Dict, Iterator, List, Optional, Union
import pyarrow as pa
import pandas as pd
import duckdb

class Config:
    """Configuration for Fluss connection"""
    def __init__(self, bootstrap_servers: str, request_timeout_millis: int) -> None: ...

class TablePath:
    """Represents a table path in Fluss"""
    def __init__(self, database_name: str, table_name: str) -> None: ...
    @property
    def database_name(self) -> str: ...
    @property
    def table_name(self) -> str: ...

class TableInfo:
    """Information about a Fluss table"""
    @property
    def table_id(self) -> int: ...
    @property
    def schema_id(self) -> int: ...
    @property
    def created_time(self) -> int: ...
    def get_primary_keys(self) -> List[str]: ...

class FlussAdmin:
    """Administrative operations for Fluss"""
    def create_table(
        self, 
        table_path: TablePath, 
        schema: pa.Schema, 
        ignore_if_exists: bool = False
    ) -> None: ...
    def get_table(self, table_path: TablePath) -> TableInfo: ...
    def drop_table(self, table_path: TablePath, ignore_if_not_exists: bool = False) -> None: ...

class TableWrite:
    """Writer for appending data to a Fluss table"""
    def write_arrow(self, table: pa.Table) -> None: ...
    def write_arrow_batch(self, batch: pa.RecordBatch) -> None: ...
    def write_pandas(self, df: pd.DataFrame) -> None: ...
    def close(self) -> None: ...

class ScanResult:
    """Result of a table scan operation"""
    def __iter__(self) -> Iterator[Dict[str, Any]]: ...
    def to_arrow(self) -> pa.Table: ...
    def to_pandas(self) -> pd.DataFrame: ...
    def to_duckdb(self, table_name: str) -> duckdb.DuckDBPyConnection: ...

class LogScanner:
    """Scanner for reading log data from a Fluss table"""
    def scan_earliest(self, end_timestamp: int) -> ScanResult: ...
    def scan_from_timestamp(self, start_timestamp: int, end_timestamp: int) -> ScanResult: ...

class FlussTable:
    """Represents a Fluss table"""
    def new_append(self) -> TableWrite: ...
    def new_log_scanner(self) -> LogScanner: ...

class FlussConnection:
    """Connection to a Fluss cluster"""
    def __init__(self, config: Config) -> None: ...
    def __enter__(self) -> FlussConnection: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def get_admin(self) -> FlussAdmin: ...
    def get_table(self, table_path: TablePath) -> FlussTable: ...
    def close(self) -> None: ...
