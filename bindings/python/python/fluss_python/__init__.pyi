"""Type stubs for Fluss Python bindings."""

from typing import Any, Dict, List, Optional

import pandas as pd
import pyarrow as pa

class Config:
    def __init__(self, config: Dict[str, str]) -> None: ...

class FlussConnection:
    @staticmethod
    async def connect(config: Config) -> FlussConnection: ...
    async def get_admin(self) -> FlussAdmin: ...
    async def get_table(self, table_path: TablePath) -> FlussTable: ...
    async def close(self) -> None: ...

class FlussAdmin:
    async def create_database(
        self, database_name: str, ignore_if_exists: bool = False
    ) -> None: ...
    async def drop_database(
        self, database_name: str, ignore_if_not_exists: bool = False
    ) -> None: ...
    async def database_exists(self, database_name: str) -> bool: ...
    async def list_databases(self) -> List[str]: ...
    async def get_database_info(self, database_name: str) -> DatabaseInfo: ...
    async def create_table(
        self,
        table_path: TablePath,
        table_descriptor: TableDescriptor,
        ignore_if_exists: bool = False,
    ) -> None: ...
    async def drop_table(
        self, table_path: TablePath, ignore_if_not_exists: bool = False
    ) -> None: ...
    async def table_exists(self, table_path: TablePath) -> bool: ...
    async def list_tables(self, database_name: str) -> List[str]: ...
    async def get_table(self, table_path: TablePath) -> TableInfo: ...
    async def get_latest_lake_snapshot(self, table_path: TablePath) -> LakeSnapshot: ...

class FlussTable:
    async def new_append_writer(self) -> AppendWriter: ...
    def new_log_scanner(self) -> LogScanner: ...
    def new_log_scanner_sync(self) -> LogScanner: ...

class AppendWriter:
    def write_arrow(self, table: pa.Table) -> None: ...
    def write_arrow_batch(self, batch: pa.RecordBatch) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...

class LogScanner:
    def subscribe(
        self, snapshot_id: Optional[int], start_offset: Optional[int]
    ) -> None: ...
    def to_pandas(self) -> pd.DataFrame: ...
    def to_arrow(self) -> pa.Table: ...
    def __iter__(self) -> LogScannerIterator: ...

class LogScannerIterator:
    def __iter__(self) -> LogScannerIterator: ...
    def __next__(self) -> pa.RecordBatch: ...

class Schema:
    def __init__(self, schema: pa.Schema) -> None: ...

class TableDescriptor:
    def __init__(
        self, schema: Schema, properties: Optional[Dict[str, str]] = None
    ) -> None: ...

class TablePath:
    def __init__(self, database: str, table: str) -> None: ...
    def database(self) -> str: ...
    def table(self) -> str: ...

class TableInfo:
    @property
    def table_id(self) -> int: ...
    @property
    def schema_id(self) -> int: ...
    @property
    def created_time(self) -> int: ...
    def get_primary_keys(self) -> List[str]: ...

class DatabaseInfo:
    @property
    def database_name(self) -> str: ...
    @property
    def created_time(self) -> int: ...

class LakeSnapshot:
    @property
    def snapshot_id(self) -> int: ...
    @property
    def table_buckets_offset(self) -> Dict[Any, int]: ...

__version__: str
